// Generated by psc-bundle 0.10.1
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (__superclass_Control$dotSemigroupoid$dotSemigroupoid_0, id) {
      this["__superclass_Control.Semigroupoid.Semigroupoid_0"] = __superclass_Control$dotSemigroupoid$dotSemigroupoid_0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
  exports["flip"] = flip;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Apply = function (__superclass_Data$dotFunctor$dotFunctor_0, apply) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (__superclass_Control$dotApply$dotApply_0, pure) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Bind = function (__superclass_Control$dotApply$dotApply_0, bind) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotBind$dotBind_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Bind.Bind_1"] = __superclass_Control$dotBind$dotBind_1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f)(function (v) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  /* globals setTimeout, clearTimeout, setImmediate, clearImmediate */
  "use strict";

  exports._setTimeout = function (nonCanceler, millis, aff) {
    var set = setTimeout;
    var clear = clearTimeout;
    if (millis <= 0 && typeof setImmediate === "function") {
      set = setImmediate;
      clear = clearImmediate;
    }
    return function (success, error) {
      var canceler;

      var timeout = set(function () {
        canceler = aff(success, error);
      }, millis);

      return function (e) {
        return function (s, f) {
          if (canceler !== undefined) {
            return canceler(e)(s, f);
          } else {
            clear(timeout);
            s(true);
            return nonCanceler;
          }
        };
      };
    };
  };

  exports._unsafeInterleaveAff = function (aff) {
    return aff;
  };

  exports._pure = function (nonCanceler, v) {
    return function (success) {
      success(v);
      return nonCanceler;
    };
  };

  exports._fmap = function (f, aff) {
    return function (success, error) {
      try {
        return aff(function (v) {
          try {
            var v2 = f(v);
          } catch (err) {
            error(err);
          }
          success(v2);
        }, error);
      } catch (err) {
        error(err);
      }
    };
  };

  exports._bind = function (alwaysCanceler, aff, f) {
    return function (success, error) {
      var canceler1, canceler2;

      var isCanceled    = false;
      var requestCancel = false;

      var onCanceler = function () {};

      canceler1 = aff(function (v) {
        if (requestCancel) {
          isCanceled = true;

          return alwaysCanceler;
        } else {
          canceler2 = f(v)(success, error);

          onCanceler(canceler2);

          return canceler2;
        }
      }, error);

      return function (e) {
        return function (s, f) {
          requestCancel = true;

          if (canceler2 !== undefined) {
            return canceler2(e)(s, f);
          } else {
            return canceler1(e)(function (bool) {
              if (bool || isCanceled) {
                s(true);
              } else {
                onCanceler = function (canceler) {
                  canceler(e)(s, f);
                };
              }
            }, f);
          }
        };
      };
    };
  };

  exports._runAff = function (errorT, successT, aff) {
    return function () {
      return aff(function (v) {
        successT(v)();
      }, function (e) {
        errorT(e)();
      });
    };
  };

  exports._liftEff = function (nonCanceler, e) {
    return function (success, error) {
      var result;
      try {
        result = e();
      } catch (err) {
        error(err);
        return nonCanceler;
      }

      success(result);
      return nonCanceler;
    };
  };
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var MonadEff = function (__superclass_Control$dotMonad$dotMonad_0, liftEff) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.liftEff = liftEff;
  };                                                   
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["MonadEff"] = MonadEff;
  exports["liftEff"] = liftEff;
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
    "use strict";

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
    "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  };                                                         
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };                                    
  var eqInt = new Eq($foreign.refEq);    
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var eqOrdering = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return true;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return true;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return true;
          };
          return false;
      };
  });
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["eqOrdering"] = eqOrdering;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["zero"] = zero;
  exports["semiringInt"] = semiringInt;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Ord = function (__superclass_Data$dotEq$dotEq_0, compare) {
      this["__superclass_Data.Eq.Eq_0"] = __superclass_Data$dotEq$dotEq_0;
      this.compare = compare;
  };                                
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["ordInt"] = ordInt;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 214, column 1 - line 214, column 22: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var fromJust = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar33) {
                  return $dollar33;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 265, column 1 - line 265, column 21: " + [ v.constructor.name ]);
          })());
      };
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromJust"] = fromJust;
  exports["isNothing"] = isNothing;
  exports["maybe"] = maybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Functor = PS["Data.Functor"];
  exports["throwException"] = $foreign.throwException;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($169) {
                  return Control_Apply.applySecond(dictApplicative["__superclass_Control.Apply.Apply_0"]())(f($169));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var sequence_ = function (dictApplicative) {
      return function (dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var maximumBy = function (dictFoldable) {
      return function (cmp) {
          var max$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $92 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.GT.value);
                          if ($92) {
                              return v.value0;
                          };
                          if (!$92) {
                              return v1;
                          };
                          throw new Error("Failed pattern match at Data.Foldable line 291, column 27 - line 291, column 57: " + [ $92.constructor.name ]);
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 290, column 3 - line 290, column 27: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(max$prime)(Data_Maybe.Nothing.value);
      };
  };
  var maximum = function (dictOrd) {
      return function (dictFoldable) {
          return maximumBy(dictFoldable)(Data_Ord.compare(dictOrd));
      };
  };
  var minimumBy = function (dictFoldable) {
      return function (cmp) {
          var min$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $96 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.LT.value);
                          if ($96) {
                              return v.value0;
                          };
                          if (!$96) {
                              return v1;
                          };
                          throw new Error("Failed pattern match at Data.Foldable line 304, column 27 - line 304, column 57: " + [ $96.constructor.name ]);
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 303, column 3 - line 303, column 27: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
      };
  };
  var minimum = function (dictOrd) {
      return function (dictFoldable) {
          return minimumBy(dictFoldable)(Data_Ord.compare(dictOrd));
      };
  };
  var sum = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring));
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["maximum"] = maximum;
  exports["maximumBy"] = maximumBy;
  exports["minimum"] = minimum;
  exports["minimumBy"] = minimumBy;
  exports["sequence_"] = sequence_;
  exports["sum"] = sum;
  exports["traverse_"] = traverse_;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };

  exports.runFn3 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return fn(a, b, c);
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];
  exports["runFn2"] = $foreign.runFn2;
  exports["runFn3"] = $foreign.runFn3;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Monad.Aff"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Aff_Internal = PS["Control.Monad.Aff.Internal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Function = PS["Data.Function"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Data_Unit = PS["Data.Unit"];
  var Canceler = function (x) {
      return x;
  };
  var runAff = function (ex) {
      return function (f) {
          return function (aff) {
              return $foreign._runAff(ex, f, aff);
          };
      };
  };
  var functorAff = new Data_Functor.Functor(function (f) {
      return function (fa) {
          return $foreign._fmap(f, fa);
      };
  });                                        
  var cancel = function (v) {
      return v;
  };
  var launchAff = (function () {
      var lowerEx = Data_Functor.map(Control_Monad_Eff.functorEff)(function ($47) {
          return Canceler(Data_Functor.map(Data_Functor.functorFn)($foreign._unsafeInterleaveAff)(cancel($47)));
      });
      return function ($48) {
          return lowerEx(runAff(Control_Monad_Eff_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit)))($foreign._unsafeInterleaveAff($48)));
      };
  })();
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, function (ff) {
      return function (fa) {
          return $foreign._bind(alwaysCanceler, ff, function (f) {
              return Data_Functor.map(functorAff)(f)(fa);
          });
      };
  });
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, function (v) {
      return $foreign._pure(nonCanceler, v);
  });
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(false));
  var alwaysCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(true));
  var later$prime = function (n) {
      return function (aff) {
          return $foreign._setTimeout(nonCanceler, n, aff);
      };
  };
  var later = later$prime(0);                                                
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, function (fa) {
      return function (f) {
          return $foreign._bind(alwaysCanceler, fa, f);
      };
  });
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var monadEffAff = new Control_Monad_Eff_Class.MonadEff(function () {
      return monadAff;
  }, function (eff) {
      return $foreign._liftEff(nonCanceler, eff);
  });
  exports["Canceler"] = Canceler;
  exports["cancel"] = cancel;
  exports["later"] = later;
  exports["launchAff"] = launchAff;
  exports["nonCanceler"] = nonCanceler;
  exports["runAff"] = runAff;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadEffAff"] = monadEffAff;
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var unsafeCoerceAff = Unsafe_Coerce.unsafeCoerce;
  exports["unsafeCoerceAff"] = unsafeCoerceAff;
})(PS["Control.Monad.Aff.Unsafe"] = PS["Control.Monad.Aff.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  exports["log"] = $foreign.log;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = [];
      for (var i = start, n = 0; i !== end; i += step) {
        result[n++] = i;
      }
      result[n] = i;
      return result;
    };
  };   

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };

  //------------------------------------------------------------------------------
  // Partial ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unsafeIndexImpl = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();                                                                                                 
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];
  exports["unsafePartial"] = $foreign.unsafePartial;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Function = PS["Data.Function"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var unsafeIndex = function (dictPartial) {
      return $foreign.unsafeIndexImpl;
  };
  exports["unsafeIndex"] = unsafeIndex;
  exports["zip"] = zip;
  exports["filter"] = $foreign.filter;
  exports["length"] = $foreign.length;
  exports["range"] = $foreign.range;
  exports["slice"] = $foreign.slice;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Ring = PS["Data.Ring"];        
  var tail = function (dictPartial) {
      return function (xs) {
          return Data_Array.slice(1)(Data_Array.length(xs))(xs);
      };
  };
  var head = function (dictPartial) {
      return function (xs) {
          return Data_Array.unsafeIndex(dictPartial)(xs)(0);
      };
  };
  exports["head"] = head;
  exports["tail"] = tail;
})(PS["Data.Array.Partial"] = PS["Data.Array.Partial"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($133) {
                  return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(acc)(f($133));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function (__copy_b) {
          return function (__copy_v) {
              var b = __copy_b;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return b;
                  };
                  if (v instanceof Cons) {
                      var __tco_b = f(b)(v.value0);
                      var __tco_v = v.value1;
                      b = __tco_b;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 67, column 3 - line 70, column 34: " + [ b.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          return function (as) {
              var rev = function (__copy_acc) {
                  return function (__copy_v) {
                      var acc = __copy_acc;
                      var v = __copy_v;
                      tco: while (true) {
                          if (v instanceof Nil) {
                              return acc;
                          };
                          if (v instanceof Cons) {
                              var __tco_acc = new Cons(v.value0, acc);
                              var __tco_v = v.value1;
                              acc = __tco_acc;
                              v = __tco_v;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.List.Types line 63, column 3 - line 66, column 40: " + [ acc.constructor.name, v.constructor.name ]);
                      };
                  };
              };
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev(Nil.value)(as));
          };
      };
  });                                                                     
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Apply = PS["Control.Apply"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Data_List_Types.Nil) {
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      var __tco_acc = new Data_List_Types.Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 352, column 1 - line 355, column 36: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  exports["fromFoldable"] = fromFoldable;
  exports["reverse"] = reverse;
  exports["singleton"] = singleton;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
    "use strict";

  // module Pux

  var React = (typeof require === 'function' && require('react'))
           || (typeof window === 'object' && window.React);

  function reactClass(htmlSignal) {
    return React.createClass({
      componentWillMount: function () {
        var ctx = this;
        htmlSignal.subscribe(function () {
          ctx.forceUpdate();
        });
      },
      render: function () {
        return htmlSignal.get()
      }
    });
  }

  exports.renderToDOM = function (selector) {
    var ReactDOM = (typeof require === 'function' && require('react-dom'))
                || (typeof window === 'object' && window.ReactDOM);
    return function (htmlSignal) {
      var elem = React.createElement(reactClass(htmlSignal));
      ReactDOM.render(elem, document.querySelector(selector))
      return function () {};
    };
  };

  exports.render = function (input, parentAction, html) {
    if (typeof html === 'string') {
      html = React.createElement('div', null, html);
    }

    function composeAction(parentAction, html) {
      var childAction = html.props && html.props.puxParentAction;
      var action = parentAction;
      if (childAction) {
        action = function (a) {
          return parentAction(childAction(a));
        };
      }
      return action;
    }

    function render(input, parentAction, html) {
      var props = html.props
      var newProps = {};

      for (var key in props) {
        if (key !== 'puxParentAction' && typeof props[key] === 'function') {
          newProps[key] = props[key](input, parentAction);
        }
      }

      var newChildren = React.Children.map(html.props.children, function (child) {
        if (typeof child === 'string') {
          return child;
        } else {
          return render(input, composeAction(parentAction, child), child);
        }
      });

      return React.cloneElement(html, newProps, newChildren);
    }

    return render(input, composeAction(parentAction, html), html);
  };
})(PS["Pux"] = PS["Pux"] || {});
(function(exports) {// module Signal

  function make(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function(sub) {
        subs.push(sub);
        sub(val);
      },
      get: function() { return val; },
      set: function(newval) {
        val = newval;
        subs.forEach(function(sub) { sub(newval); });
      }
    };
    return sig;
  };

  exports.constant = make;

  exports.mapSig = function(fun) {
    return function(sig) {
      var out = make(fun(sig.get()));
      sig.subscribe(function(val) { out.set(fun(val)); });
      return out;
    };
  };

  exports.merge = function(sig1) {
    return function(sig2) {
      var out = make(sig1.get());
      sig2.subscribe(out.set);
      sig1.subscribe(out.set);
      return out;
    };
  };

  exports.foldp = function(fun) {
    return function(seed) {
      return function(sig) {
        var acc = seed;
        var out = make(acc);
        sig.subscribe(function(val) {
          acc = fun(val)(acc);
          out.set(acc);
        });
        return out;
      };
    };
  };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Signal"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Monoid = PS["Data.Monoid"];                               
  var mergeMany = function (dictFunctor) {
      return function (dictFoldable) {
          return function (sigs) {
              var mergeMaybe = function (v) {
                  return function (v1) {
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return v;
                      };
                      if (v instanceof Data_Maybe.Nothing) {
                          return v1;
                      };
                      if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                          return new Data_Maybe.Just($foreign.merge(v.value0)(v1.value0));
                      };
                      throw new Error("Failed pattern match at Signal line 52, column 9 - line 52, column 33: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Data_Foldable.foldl(dictFoldable)(mergeMaybe)(Data_Maybe.Nothing.value)(Data_Functor.map(dictFunctor)(Data_Maybe.Just.create)(sigs));
          };
      };
  };
  var functorSignal = new Data_Functor.Functor($foreign.mapSig);
  var flippedMap = function (dictFunctor) {
      return Data_Function.flip(Data_Functor.map(dictFunctor));
  };
  exports["flippedMap"] = flippedMap;
  exports["mergeMany"] = mergeMany;
  exports["functorSignal"] = functorSignal;
  exports["constant"] = $foreign.constant;
  exports["foldp"] = $foreign.foldp;
  exports["runSignal"] = $foreign.runSignal;
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {// module Signal.Channel

  exports.channelP =
    function channelP(constant) {
      return function(v) {
        return function() {
          return constant(v);
        };
      };
    };

  exports.sendP =
    function sendP(chan) {
      return function(v) {
        return function() {
          chan.set(v);
        };
      };
    };

  exports.subscribe =
    function subscribe(chan) {
      return chan;
    };
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Signal.Channel"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];        
  var send = $foreign.sendP;
  var channel = $foreign.channelP(Signal.constant);
  exports["channel"] = channel;
  exports["send"] = send;
  exports["subscribe"] = $foreign.subscribe;
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Pux"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_Unsafe = PS["Control.Monad.Aff.Unsafe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Pux_Html = PS["Pux.Html"];
  var React = PS["React"];
  var Signal = PS["Signal"];
  var Signal_Channel = PS["Signal.Channel"];
  var Control_Bind = PS["Control.Bind"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var noEffects = function (state) {
      return {
          state: state, 
          effects: [  ]
      };
  };
  var start = function (config) {
      return function __do() {
          var v = Signal_Channel.channel(Data_List_Types.Nil.value)();
          var mapAffect = function (affect) {
              return Control_Monad_Aff.launchAff(Control_Monad_Aff_Unsafe.unsafeCoerceAff(Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.later(affect))(function (v1) {
                  return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Signal_Channel.send(v)(Data_List.singleton(v1)));
              })));
          };
          var foldState = function (effModel) {
              return function (action) {
                  return config.update(action)(effModel.state);
              };
          };
          var foldActions = function (actions) {
              return function (effModel) {
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(foldState)(noEffects(effModel.state))(actions);
              };
          };
          var actionSignal = Signal_Channel.subscribe(v);
          var input = Partial_Unsafe.unsafePartial(function (dictPartial) {
              return Data_Maybe.fromJust(dictPartial)(Signal.mergeMany(Data_List_Types.functorList)(Data_List_Types.foldableList)(Data_List.reverse(new Data_List_Types.Cons(actionSignal, Data_Functor.map(Data_List_Types.functorList)(Data_Functor.map(Signal.functorSignal)(Data_List.singleton))(Data_List.fromFoldable(Data_Foldable.foldableArray)(config.inputs))))));
          });
          var effModelSignal = Signal.foldp(foldActions)(noEffects(config.initialState))(input);
          var effectsSignal = Signal.flippedMap(Signal.functorSignal)(effModelSignal)(function ($7) {
              return Data_Functor.map(Data_Functor.functorArray)(mapAffect)((function (v1) {
                  return v1.effects;
              })($7));
          });
          var stateSignal = Signal.flippedMap(Signal.functorSignal)(effModelSignal)(function (v1) {
              return v1.state;
          });
          var htmlSignal = Signal.flippedMap(Signal.functorSignal)(stateSignal)(function (state) {
              return $foreign.render(function ($8) {
                  return Signal_Channel.send(v)(Data_List.singleton($8));
              }, function (a) {
                  return a;
              }, config.view(state));
          });
          Signal.runSignal(Signal.flippedMap(Signal.functorSignal)(effectsSignal)(Data_Foldable.sequence_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)))();
          return {
              html: htmlSignal, 
              state: stateSignal, 
              actionChannel: v
          };
      };
  };
  exports["noEffects"] = noEffects;
  exports["start"] = start;
  exports["renderToDOM"] = $foreign.renderToDOM;
})(PS["Pux"] = PS["Pux"] || {});
(function(exports) {
    'use strict';

  // module Pux.Html.Attributes

  exports.attr = function (key) {
    return function (val) {
      if (key === 'dangerouslySetInnerHTML') {
        val = { __html: val };
      } else if (key === 'style') {
        val = val.reduce(function (obj, tuple) {
          obj[tuple.value0] = tuple.value1;
          return obj;
        }, {});
      }
      return [key, val];
    };
  };
})(PS["Pux.Html.Attributes"] = PS["Pux.Html.Attributes"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Pux.Html.Attributes"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Pux_Html = PS["Pux.Html"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var className = $foreign.attr("className");
  exports["className"] = className;
})(PS["Pux.Html.Attributes"] = PS["Pux.Html.Attributes"] || {});
(function(exports) {
    'use strict';

  // module Pux.Html.Events

  exports.handler = function (key, action) {
    return [key, function (input, parentAction) {
      return function (ev) {
        if ((key === 'onSubmit')
        || (key === 'onClick' && ev.currentTarget.nodeName.toLowerCase() === 'a')) {
          ev.preventDefault();
        }
        input(parentAction(action(ev)))();
      };
    }];
  };
})(PS["Pux.Html.Events"] = PS["Pux.Html.Events"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Pux.Html.Events"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Pux_Html = PS["Pux.Html"];                                                              
  var onClick = Data_Function_Uncurried.runFn2($foreign.handler)("onClick");
  exports["onClick"] = onClick;
})(PS["Pux.Html.Events"] = PS["Pux.Html.Events"] || {});
(function(exports) {
    'use strict';

  // module Pux.Html.Elements

  var React = (typeof require === 'function' && require('react'))
           || (typeof window === 'object' && window.React);

  exports.text = function (text) {
    return text;
  };

  exports.element = function (tagName, attrs, children) {
    if (Array.isArray(children[0])) children = children[0];

    var props = attrs.reduce(function (obj, attr) {
      var key = attr[0];
      var val = attr[1];
      obj[key] = val;
      return obj;
    }, {});

    return React.createElement.apply(React, [tagName, props].concat(children));
  };
})(PS["Pux.Html.Elements"] = PS["Pux.Html.Elements"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Pux.Html.Elements"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Prelude = PS["Prelude"];
  var Data_Functor = PS["Data.Functor"];                                  
  var i = Data_Function_Uncurried.runFn3($foreign.element)("i");  
  var div = Data_Function_Uncurried.runFn3($foreign.element)("div");
  exports["div"] = div;
  exports["i"] = i;
  exports["text"] = $foreign.text;
})(PS["Pux.Html.Elements"] = PS["Pux.Html.Elements"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_Partial = PS["Data.Array.Partial"];
  var Data_Tuple = PS["Data.Tuple"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Pux = PS["Pux"];
  var Pux_Html = PS["Pux.Html"];
  var Pux_Html_Attributes = PS["Pux.Html.Attributes"];
  var Pux_Html_Events = PS["Pux.Html.Events"];
  var Data_Show = PS["Data.Show"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Pux_Html_Elements = PS["Pux.Html.Elements"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];        
  var X = (function () {
      function X() {

      };
      X.value = new X();
      return X;
  })();
  var O = (function () {
      function O() {

      };
      O.value = new O();
      return O;
  })();
  var XWins = (function () {
      function XWins() {

      };
      XWins.value = new XWins();
      return XWins;
  })();
  var OWins = (function () {
      function OWins() {

      };
      OWins.value = new OWins();
      return OWins;
  })();
  var Draw = (function () {
      function Draw() {

      };
      Draw.value = new Draw();
      return Draw;
  })();
  var Move = (function () {
      function Move(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Move.create = function (value0) {
          return function (value1) {
              return new Move(value0, value1);
          };
      };
      return Move;
  })();
  var Play = (function () {
      function Play(value0) {
          this.value0 = value0;
      };
      Play.create = function (value0) {
          return new Play(value0);
      };
      return Play;
  })();
  var Computer = (function () {
      function Computer(value0) {
          this.value0 = value0;
      };
      Computer.create = function (value0) {
          return new Computer(value0);
      };
      return Computer;
  })();
  var ReportChoice = (function () {
      function ReportChoice(value0) {
          this.value0 = value0;
      };
      ReportChoice.create = function (value0) {
          return new ReportChoice(value0);
      };
      return ReportChoice;
  })();
  var CheckWinner = (function () {
      function CheckWinner() {

      };
      CheckWinner.value = new CheckWinner();
      return CheckWinner;
  })();
  var ShowResult = (function () {
      function ShowResult(value0) {
          this.value0 = value0;
      };
      ShowResult.create = function (value0) {
          return new ShowResult(value0);
      };
      return ShowResult;
  })();
  var UpdateScore = (function () {
      function UpdateScore(value0) {
          this.value0 = value0;
      };
      UpdateScore.create = function (value0) {
          return new UpdateScore(value0);
      };
      return UpdateScore;
  })();
  var Reset = (function () {
      function Reset() {

      };
      Reset.value = new Reset();
      return Reset;
  })();
  var updateBoard = function (i) {
      return function (t) {
          var updateSquare = function (i1) {
              return function (t1) {
                  return function (v) {
                      if (i1 === v.value0) {
                          return new Data_Tuple.Tuple(i1, new Data_Maybe.Just(t1));
                      };
                      if (Data_Boolean.otherwise) {
                          return new Data_Tuple.Tuple(v.value0, v.value1);
                      };
                      throw new Error("Failed pattern match at Game line 146, column 9 - line 147, column 65: " + [ i1.constructor.name, t1.constructor.name, v.constructor.name ]);
                  };
              };
          };
          return Data_Functor.map(Data_Functor.functorArray)(updateSquare(i)(t));
      };
  };
  var showToken = new Data_Show.Show(function (v) {
      if (v instanceof X) {
          return "X";
      };
      if (v instanceof O) {
          return "O";
      };
      throw new Error("Failed pattern match at Game line 24, column 3 - line 25, column 3: " + [ v.constructor.name ]);
  });
  var reset = function (state) {
      var $34 = {};
      for (var $35 in state) {
          if (state.hasOwnProperty($35)) {
              $34[$35] = state[$35];
          };
      };
      $34.board = Data_Functor.map(Data_Functor.functorArray)(function (i) {
          return new Data_Tuple.Tuple(i, Data_Maybe.Nothing.value);
      })(Data_Array.range(1)(9));
      $34.current = X.value;
      $34.result = Data_Maybe.Nothing.value;
      return $34;
  };
  var not = function (v) {
      if (v instanceof X) {
          return O.value;
      };
      if (v instanceof O) {
          return X.value;
      };
      throw new Error("Failed pattern match at Game line 33, column 1 - line 33, column 10: " + [ v.constructor.name ]);
  };
  var minimum$prime = function (xs) {
      var min = Data_Foldable.minimum(Data_Ord.ordInt)(Data_Foldable.foldableArray)(xs);
      if (min instanceof Data_Maybe.Just) {
          return min.value0;
      };
      if (min instanceof Data_Maybe.Nothing) {
          return 0;
      };
      throw new Error("Failed pattern match at Game line 349, column 3 - line 352, column 7: " + [ min.constructor.name ]);
  };
  var minAbMap = function (alpha) {
      return function (beta) {
          return function (fun) {
              return function (v) {
                  if (v.length === 0) {
                      return [  ];
                  };
                  var score1 = Partial_Unsafe.unsafePartial(function (dictPartial) {
                      return fun(alpha)(beta)(Data_Array_Partial.head(dictPartial)(v));
                  });
                  var rest = Partial_Unsafe.unsafePartial(function (dictPartial) {
                      return Data_Array_Partial.tail(dictPartial)(v);
                  });
                  var $44 = score1 <= alpha;
                  if ($44) {
                      return [ alpha ];
                  };
                  if (!$44) {
                      var $45 = score1 < beta;
                      if ($45) {
                          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ score1 ])(minAbMap(alpha)(score1)(fun)(rest));
                      };
                      if (!$45) {
                          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ score1 ])(minAbMap(alpha)(beta)(fun)(rest));
                      };
                      throw new Error("Failed pattern match at Game line 329, column 35 - line 331, column 77: " + [ $45.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Game line 327, column 30 - line 331, column 77: " + [ $44.constructor.name ]);
              };
          };
      };
  };
  var maximum$prime = function (xs) {
      var max = Data_Foldable.maximum(Data_Ord.ordInt)(Data_Foldable.foldableArray)(xs);
      if (max instanceof Data_Maybe.Just) {
          return max.value0;
      };
      if (max instanceof Data_Maybe.Nothing) {
          return 0;
      };
      throw new Error("Failed pattern match at Game line 342, column 3 - line 345, column 7: " + [ max.constructor.name ]);
  };
  var maxAbMap = function (alpha) {
      return function (beta) {
          return function (fun) {
              return function (v) {
                  if (v.length === 0) {
                      return [  ];
                  };
                  var score1 = Partial_Unsafe.unsafePartial(function (dictPartial) {
                      return fun(alpha)(beta)(Data_Array_Partial.head(dictPartial)(v));
                  });
                  var rest = Partial_Unsafe.unsafePartial(function (dictPartial) {
                      return Data_Array_Partial.tail(dictPartial)(v);
                  });
                  var $52 = score1 >= beta;
                  if ($52) {
                      return [ beta ];
                  };
                  if (!$52) {
                      var $53 = score1 > alpha;
                      if ($53) {
                          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ score1 ])(maxAbMap(score1)(beta)(fun)(rest));
                      };
                      if (!$53) {
                          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ score1 ])(maxAbMap(alpha)(beta)(fun)(rest));
                      };
                      throw new Error("Failed pattern match at Game line 319, column 35 - line 321, column 77: " + [ $53.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Game line 317, column 30 - line 321, column 77: " + [ $52.constructor.name ]);
              };
          };
      };
  };
  var isEmpty = function (v) {
      return Data_Maybe.isNothing(v.value1);
  };
  var init = {
      board: Data_Functor.map(Data_Functor.functorArray)(function (i) {
          return new Data_Tuple.Tuple(i, Data_Maybe.Nothing.value);
      })(Data_Array.range(1)(9)), 
      current: X.value, 
      player: X.value, 
      score: {
          xWins: 0, 
          oWins: 0, 
          draws: 0
      }, 
      gettingChoice: true, 
      result: Data_Maybe.Nothing.value
  };
  var getMoves = function (token) {
      return function (board) {
          var makeMove = function (token1) {
              return function (v) {
                  return new Move(v.value0, token1);
              };
          };
          return Data_Functor.map(Data_Functor.functorArray)(makeMove(token))(Data_Array.filter(isEmpty)(board));
      };
  };
  var getFaIcon = function (v) {
      if (v instanceof X) {
          return Pux_Html_Elements.i([ Pux_Html_Attributes.className("X fa fa-times") ])([  ]);
      };
      if (v instanceof O) {
          return Pux_Html_Elements.i([ Pux_Html_Attributes.className("O fa fa-circle-o") ])([  ]);
      };
      throw new Error("Failed pattern match at Game line 230, column 1 - line 230, column 51: " + [ v.constructor.name ]);
  };
  var resultHtml = function (state) {
      var winner = function (v) {
          if (v instanceof Data_Maybe.Just && v.value0 instanceof XWins) {
              return getFaIcon(X.value);
          };
          if (v instanceof Data_Maybe.Just && v.value0 instanceof OWins) {
              return getFaIcon(O.value);
          };
          if (v instanceof Data_Maybe.Just && v.value0 instanceof Draw) {
              return Pux_Html_Elements.text("Nobody");
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Pux_Html_Elements.text("");
          };
          throw new Error("Failed pattern match at Game line 221, column 40 - line 221, column 73: " + [ v.constructor.name ]);
      };
      var $66 = Data_Maybe.isNothing(state.result);
      if ($66) {
          return Pux_Html_Elements.div([  ])([  ]);
      };
      if (!$66) {
          return Pux_Html_Elements.div([ Pux_Html_Attributes.className("result") ])([ Pux_Html_Elements.div([  ])([ winner(state.result), Pux_Html_Elements.text(" wins!") ]), Pux_Html_Elements.div([ Pux_Html_Attributes.className("again"), Pux_Html_Events.onClick(Data_Function["const"](Reset.value)) ])([ Pux_Html_Elements.text("Play again?") ]) ]);
      };
      throw new Error("Failed pattern match at Game line 213, column 20 - line 220, column 33: " + [ $66.constructor.name ]);
  };
  var scoreHtml = function (state) {
      return Pux_Html_Elements.div([ Pux_Html_Attributes.className("score") ])([ Pux_Html_Elements.text("Score: "), getFaIcon(X.value), Pux_Html_Elements.text("  " + (Data_Show.show(Data_Show.showInt)(state.score.xWins) + ",  ")), getFaIcon(O.value), Pux_Html_Elements.text("  " + (Data_Show.show(Data_Show.showInt)(state.score.oWins) + ", ")), Pux_Html_Elements.text("  Draw: " + Data_Show.show(Data_Show.showInt)(state.score.draws)) ]);
  };
  var squareHtml = function (v) {
      if (v.value1 instanceof Data_Maybe.Nothing) {
          return Pux_Html_Elements.div([ Pux_Html_Attributes.className("square empty"), Pux_Html_Events.onClick(Data_Function["const"](new Play(v.value0))) ])([  ]);
      };
      if (v.value1 instanceof Data_Maybe.Just) {
          return Pux_Html_Elements.div([ Pux_Html_Attributes.className("square " + Data_Show.show(showToken)(v.value1.value0)) ])([ getFaIcon(v.value1.value0) ]);
      };
      throw new Error("Failed pattern match at Game line 193, column 1 - line 195, column 5: " + [ v.constructor.name ]);
  };
  var unplayableSquareHtml = function (v) {
      if (v.value1 instanceof Data_Maybe.Nothing) {
          return Pux_Html_Elements.div([ Pux_Html_Attributes.className("square") ])([  ]);
      };
      if (v.value1 instanceof Data_Maybe.Just) {
          return Pux_Html_Elements.div([ Pux_Html_Attributes.className("square " + Data_Show.show(showToken)(v.value1.value0)) ])([ getFaIcon(v.value1.value0) ]);
      };
      throw new Error("Failed pattern match at Game line 203, column 1 - line 205, column 5: " + [ v.constructor.name ]);
  };
  var eqToken = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof X && v1 instanceof X) {
              return true;
          };
          if (v instanceof O && v1 instanceof O) {
              return true;
          };
          return false;
      };
  });
  var scorePos = function (board) {
      return function (t) {
          return function (i) {
              var eq = function (v) {
                  return function (v1) {
                      if (v.value1 instanceof Data_Maybe.Nothing) {
                          return false;
                      };
                      if (v1.value1 instanceof Data_Maybe.Nothing) {
                          return false;
                      };
                      if (v.value1 instanceof Data_Maybe.Just && v1.value1 instanceof Data_Maybe.Just) {
                          return v.value0 === v1.value0 && Data_Eq.eq(eqToken)(v.value1.value0)(v1.value1.value0);
                      };
                      throw new Error("Failed pattern match at Game line 255, column 9 - line 255, column 39: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Data_Array.length(Data_Array.filter(eq(new Data_Tuple.Tuple(i, new Data_Maybe.Just(t))))(board));
          };
      };
  };
  var score = function (board) {
      return function (t) {
          return function (is) {
              return Data_Foldable.sum(Data_Foldable.foldableArray)(Data_Semiring.semiringInt)(Data_Functor.map(Data_Functor.functorArray)(scorePos(board)(t))(is));
          };
      };
  };
  var filterForScore = function (board) {
      return function (t) {
          return function (num) {
              return function (dgs) {
                  return Data_Array.filter(function (diag) {
                      return score(board)(t)(diag) === num;
                  })(dgs);
              };
          };
      };
  };
  var doMove = function (v) {
      if (v.value0 === 0) {
          return CheckWinner.value;
      };
      return new Computer(v.value0);
  };
  var diags = [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ], [ 1, 4, 7 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 1, 5, 9 ], [ 3, 5, 7 ] ];
  var comp = function (v) {
      return function (v1) {
          return Data_Ord.compare(Data_Ord.ordInt)(v.value1)(v1.value1);
      };
  };
  var chooserHtml = function (state) {
      if (state.gettingChoice) {
          return Pux_Html_Elements.div([ Pux_Html_Attributes.className("chooser") ])([ Pux_Html_Elements.div([ Pux_Html_Attributes.className("chooser-box") ])([ Pux_Html_Elements.div([  ])([ Pux_Html_Elements.text("Pick a side. Choose wisely. ") ]), Pux_Html_Elements.div([ Pux_Html_Attributes.className("choice"), Pux_Html_Events.onClick(Data_Function["const"](new ReportChoice(X.value))) ])([ getFaIcon(X.value) ]), Pux_Html_Elements.div([ Pux_Html_Attributes.className("choice"), Pux_Html_Events.onClick(Data_Function["const"](new ReportChoice(O.value))) ])([ getFaIcon(O.value) ]) ]) ]);
      };
      if (!state.gettingChoice) {
          return Pux_Html_Elements.div([  ])([  ]);
      };
      throw new Error("Failed pattern match at Game line 166, column 3 - line 175, column 20: " + [ state.gettingChoice.constructor.name ]);
  };
  var checkWin = function (t) {
      return function (board) {
          return Data_Array.length(filterForScore(board)(t)(3)(diags)) > 0;
      };
  };
  var evaluate = function (board) {
      if (checkWin(X.value)(board)) {
          return 10;
      };
      if (checkWin(O.value)(board)) {
          return -10;
      };
      if (Data_Boolean.otherwise) {
          return 0;
      };
      throw new Error("Failed pattern match at Game line 368, column 1 - line 372, column 1: " + [ board.constructor.name ]);
  };
  var gameOver = function (board) {
      var checkFull = function (board1) {
          return Data_Array.length(Data_Array.filter(isEmpty)(board1)) === 0;
      };
      return checkWin(X.value)(board) || (checkWin(O.value)(board) || checkFull(board));
  };
  var getResult = function (board) {
      var $110 = checkWin(O.value)(board);
      if ($110) {
          return OWins.value;
      };
      if (!$110) {
          var $111 = checkWin(X.value)(board);
          if ($111) {
              return XWins.value;
          };
          if (!$111) {
              return Draw.value;
          };
          throw new Error("Failed pattern match at Game line 267, column 19 - line 267, column 59: " + [ $111.constructor.name ]);
      };
      throw new Error("Failed pattern match at Game line 266, column 19 - line 267, column 59: " + [ $110.constructor.name ]);
  };
  var boardHtml = function (state) {
      return Pux_Html_Elements.div([ Pux_Html_Attributes.className("board") ])(Data_Functor.map(Data_Functor.functorArray)((function () {
          var $112 = Data_Maybe.isNothing(state.result);
          if ($112) {
              return squareHtml;
          };
          if (!$112) {
              return unplayableSquareHtml;
          };
          throw new Error("Failed pattern match at Game line 179, column 8 - line 179, column 75: " + [ $112.constructor.name ]);
      })())(state.board));
  };
  var view = function (state) {
      return Pux_Html_Elements.div([  ])([ chooserHtml(state), Pux_Html_Elements.div([ Pux_Html_Attributes.className("game") ])([ boardHtml(state), scoreHtml(state), resultHtml(state) ]) ]);
  };
  var bestMove = function (v) {
      return function (moves) {
          if (v instanceof X) {
              var $115 = Data_Foldable.maximumBy(Data_Foldable.foldableArray)(comp)(moves);
              if ($115 instanceof Data_Maybe.Just) {
                  return $115.value0;
              };
              if ($115 instanceof Data_Maybe.Nothing) {
                  return new Data_Tuple.Tuple(new Move(0, X.value), 0);
              };
              throw new Error("Failed pattern match at Game line 382, column 20 - line 385, column 1: " + [ $115.constructor.name ]);
          };
          if (v instanceof O) {
              var $117 = Data_Foldable.minimumBy(Data_Foldable.foldableArray)(comp)(moves);
              if ($117 instanceof Data_Maybe.Just) {
                  return $117.value0;
              };
              if ($117 instanceof Data_Maybe.Nothing) {
                  return new Data_Tuple.Tuple(new Move(0, O.value), 0);
              };
              throw new Error("Failed pattern match at Game line 385, column 20 - line 389, column 1: " + [ $117.constructor.name ]);
          };
          throw new Error("Failed pattern match at Game line 382, column 1 - line 385, column 1: " + [ v.constructor.name, moves.constructor.name ]);
      };
  };
  var applyMove = function (board) {
      return function (v) {
          var updateCell = function (i1) {
              return function (t1) {
                  return function (v1) {
                      if (i1 === v1.value0) {
                          return new Data_Tuple.Tuple(i1, new Data_Maybe.Just(t1));
                      };
                      if (Data_Boolean.otherwise) {
                          return new Data_Tuple.Tuple(v1.value0, v1.value1);
                      };
                      throw new Error("Failed pattern match at Game line 374, column 9 - line 375, column 63: " + [ i1.constructor.name, t1.constructor.name, v1.constructor.name ]);
                  };
              };
          };
          return Data_Functor.map(Data_Functor.functorArray)(updateCell(v.value0)(v.value1))(board);
      };
  };
  var abMinimax = function (depth) {
      return function (token) {
          return function (alpha) {
              return function (beta) {
                  return function (board) {
                      if (gameOver(board)) {
                          return evaluate(board);
                      };
                      if (depth === 0) {
                          return 0;
                      };
                      if (Data_Boolean.otherwise) {
                          var moves = getMoves(token)(board);
                          var newBoards = Data_Functor.map(Data_Functor.functorArray)(applyMove(board))(moves);
                          if (token instanceof X) {
                              return maximum$prime(maxAbMap(alpha)(beta)(abMinimax(depth - 1)(O.value))(newBoards));
                          };
                          if (token instanceof O) {
                              return minimum$prime(minAbMap(alpha)(beta)(abMinimax(depth - 1)(X.value))(newBoards));
                          };
                          throw new Error("Failed pattern match at Game line 308, column 22 - line 310, column 76: " + [ token.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Game line 305, column 1 - line 313, column 48: " + [ depth.constructor.name, token.constructor.name, alpha.constructor.name, beta.constructor.name, board.constructor.name ]);
                  };
              };
          };
      };
  };
  var getComputerMove = function (state) {
      var moves = getMoves(state.current)(state.board);
      var newBoards = Data_Functor.map(Data_Functor.functorArray)(applyMove(state.board))(moves);
      var scores = Data_Functor.map(Data_Functor.functorArray)(abMinimax(5)(not(state.current))(-100)(100))(newBoards);
      var scoredMoves = Data_Array.zip(moves)(scores);
      return doMove(Data_Tuple.fst(bestMove(state.current)(scoredMoves)));
  };
  var update = function (v) {
      return function (state) {
          if (v instanceof Play) {
              var newState = (function () {
                  var $136 = {};
                  for (var $137 in state) {
                      if (state.hasOwnProperty($137)) {
                          $136[$137] = state[$137];
                      };
                  };
                  $136.board = updateBoard(v.value0)(state.current)(state.board);
                  $136.current = not(state.current);
                  return $136;
              })();
              return {
                  state: newState, 
                  effects: [ (function () {
                      var $139 = gameOver(newState.board);
                      if ($139) {
                          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(ShowResult.create(getResult(newState.board)));
                      };
                      if (!$139) {
                          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(getComputerMove(newState));
                      };
                      throw new Error("Failed pattern match at Game line 98, column 36 - line 101, column 69: " + [ $139.constructor.name ]);
                  })() ]
              };
          };
          if (v instanceof Computer) {
              var newState = function (i1) {
                  if (i1 === 0) {
                      return state;
                  };
                  if (Data_Boolean.otherwise) {
                      var $142 = {};
                      for (var $143 in state) {
                          if (state.hasOwnProperty($143)) {
                              $142[$143] = state[$143];
                          };
                      };
                      $142.board = updateBoard(i1)(state.current)(state.board);
                      $142.current = not(state.current);
                      return $142;
                  };
                  throw new Error("Failed pattern match at Game line 110, column 14 - line 113, column 33: " + [ i1.constructor.name ]);
              };
              return {
                  state: newState(v.value0), 
                  effects: [ Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(CheckWinner.value) ]
              };
          };
          if (v instanceof ReportChoice && v.value0 instanceof X) {
              return Pux.noEffects((function () {
                  var $146 = {};
                  for (var $147 in state) {
                      if (state.hasOwnProperty($147)) {
                          $146[$147] = state[$147];
                      };
                  };
                  $146.player = X.value;
                  $146.gettingChoice = false;
                  return $146;
              })());
          };
          if (v instanceof ReportChoice && v.value0 instanceof O) {
              return {
                  state: (function () {
                      var $150 = {};
                      for (var $151 in state) {
                          if (state.hasOwnProperty($151)) {
                              $150[$151] = state[$151];
                          };
                      };
                      $150.player = O.value;
                      $150.gettingChoice = false;
                      return $150;
                  })(), 
                  effects: [ Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(getComputerMove(state)) ]
              };
          };
          if (v instanceof CheckWinner) {
              var $154 = gameOver(state.board);
              if ($154) {
                  return {
                      state: state, 
                      effects: [ Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(ShowResult.create(getResult(state.board))) ]
                  };
              };
              if (!$154) {
                  return Pux.noEffects(state);
              };
              throw new Error("Failed pattern match at Game line 122, column 28 - line 128, column 65: " + [ $154.constructor.name ]);
          };
          if (v instanceof ShowResult) {
              return Pux.noEffects((function () {
                  var $155 = {};
                  for (var $156 in state) {
                      if (state.hasOwnProperty($156)) {
                          $155[$156] = state[$156];
                      };
                  };
                  $155.result = new Data_Maybe.Just(v.value0);
                  return $155;
              })());
          };
          if (v instanceof Reset) {
              return {
                  state: reset(state), 
                  effects: [ Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(UpdateScore.create(Partial_Unsafe.unsafePartial(function (dictPartial) {
                      return Data_Maybe.fromJust(dictPartial)(state.result);
                  }))) ]
              };
          };
          if (v instanceof UpdateScore && v.value0 instanceof XWins) {
              return Pux.noEffects((function () {
                  var $162 = {};
                  for (var $163 in state) {
                      if (state.hasOwnProperty($163)) {
                          $162[$163] = state[$163];
                      };
                  };
                  $162.score = (function () {
                      var $159 = {};
                      for (var $160 in state.score) {
                          if (state.score.hasOwnProperty($160)) {
                              $159[$160] = state.score[$160];
                          };
                      };
                      $159.xWins = state.score.xWins + 1 | 0;
                      return $159;
                  })();
                  return $162;
              })());
          };
          if (v instanceof UpdateScore && v.value0 instanceof OWins) {
              return Pux.noEffects((function () {
                  var $169 = {};
                  for (var $170 in state) {
                      if (state.hasOwnProperty($170)) {
                          $169[$170] = state[$170];
                      };
                  };
                  $169.score = (function () {
                      var $166 = {};
                      for (var $167 in state.score) {
                          if (state.score.hasOwnProperty($167)) {
                              $166[$167] = state.score[$167];
                          };
                      };
                      $166.oWins = state.score.oWins + 1 | 0;
                      return $166;
                  })();
                  return $169;
              })());
          };
          if (v instanceof UpdateScore && v.value0 instanceof Draw) {
              return Pux.noEffects((function () {
                  var $176 = {};
                  for (var $177 in state) {
                      if (state.hasOwnProperty($177)) {
                          $176[$177] = state[$177];
                      };
                  };
                  $176.score = (function () {
                      var $173 = {};
                      for (var $174 in state.score) {
                          if (state.score.hasOwnProperty($174)) {
                              $173[$174] = state.score[$174];
                          };
                      };
                      $173.draws = state.score.draws + 1 | 0;
                      return $173;
                  })();
                  return $176;
              })());
          };
          throw new Error("Failed pattern match at Game line 96, column 1 - line 105, column 57: " + [ v.constructor.name, state.constructor.name ]);
      };
  };
  exports["Play"] = Play;
  exports["Computer"] = Computer;
  exports["ReportChoice"] = ReportChoice;
  exports["CheckWinner"] = CheckWinner;
  exports["ShowResult"] = ShowResult;
  exports["UpdateScore"] = UpdateScore;
  exports["Reset"] = Reset;
  exports["Move"] = Move;
  exports["XWins"] = XWins;
  exports["OWins"] = OWins;
  exports["Draw"] = Draw;
  exports["X"] = X;
  exports["O"] = O;
  exports["abMinimax"] = abMinimax;
  exports["applyMove"] = applyMove;
  exports["bestMove"] = bestMove;
  exports["boardHtml"] = boardHtml;
  exports["checkWin"] = checkWin;
  exports["chooserHtml"] = chooserHtml;
  exports["comp"] = comp;
  exports["diags"] = diags;
  exports["doMove"] = doMove;
  exports["evaluate"] = evaluate;
  exports["filterForScore"] = filterForScore;
  exports["gameOver"] = gameOver;
  exports["getComputerMove"] = getComputerMove;
  exports["getFaIcon"] = getFaIcon;
  exports["getMoves"] = getMoves;
  exports["getResult"] = getResult;
  exports["init"] = init;
  exports["isEmpty"] = isEmpty;
  exports["maxAbMap"] = maxAbMap;
  exports["minAbMap"] = minAbMap;
  exports["not"] = not;
  exports["reset"] = reset;
  exports["resultHtml"] = resultHtml;
  exports["score"] = score;
  exports["scoreHtml"] = scoreHtml;
  exports["scorePos"] = scorePos;
  exports["squareHtml"] = squareHtml;
  exports["unplayableSquareHtml"] = unplayableSquareHtml;
  exports["update"] = update;
  exports["updateBoard"] = updateBoard;
  exports["view"] = view;
  exports["showToken"] = showToken;
  exports["eqToken"] = eqToken;
})(PS["Game"] = PS["Game"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Pux = PS["Pux"];
  var Game = PS["Game"];
  var Control_Bind = PS["Control.Bind"];        
  var main = function __do() {
      Control_Monad_Eff_Console.log("What the fuck?")();
      var v = Pux.start({
          initialState: Game.init, 
          update: Game.update, 
          view: Game.view, 
          inputs: [  ]
      })();
      return Pux.renderToDOM("#app")(v.html)();
  };
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
